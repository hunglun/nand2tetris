// Fri Dec  1 04:21:37 +08 2017 - implemented drawPixel
// Sat Dec  2 06:51:52 +08 2017 - draw vertical line and horizontal line


// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    /** Initializes the Screen. */
    function void init() {
	return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
	return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
	return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
	var int m, v, p, p2;
	let m = 16384 + (y * 32) + (x / 16);
	let v = Memory.peek(m);
	let p = x - ((x/16) * 16);
	// (v & ~(2^p)) + 2^p
	let p2 = 1;
	while(p > 0){
	    let p2 = p2 * 2;
	    let p = p - 1;
	}
	// 2 ^ p
	let v = (v & (~p2)) + p2;
	do Memory.poke(m,v);
	return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
	var int a,b,dx,dy,tmp;
	let a = 0;
	let b = 0;
	// TODO take care of 4 other cases.
	let dx = x2 - x1 + 1; // assume x2 > x1;
	let dy = y2 - y1 + 1; // assume y2 > y1;

	while( ~(a > dx) & ~( b > dy)){
	    do Screen.drawPixel(x1+a, y1+b);
	    if ((a * dy) < (b * dx)){
		let a = a + 1;
	    }else{
		let b = b + 1;
	    }
	}
	return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
	return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
	return;
    }
}
